# Remote Control Car with Raspberry Pi and Arduino
# This script allows Raspberry Pi to control an Arduino-based remote control car via network sockets.

import socket
import json

# Define the IP address and port of the Arduino server
arduino_host = '192.168.1.100'  # Replace with Arduino's IP address
arduino_port = 5050

# Create a socket object for the Raspberry Pi (client)
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    # Connect to the Arduino server
    client_socket.connect((arduino_host, arduino_port))
    print(f"Connected to Arduino at {arduino_host}:{arduino_port}")

    # Example control command (could be replaced with actual control logic)
    control_command = {'direction': 'forward', 'speed': 50}
    
    # Serialize the control command to JSON format
    command_json = json.dumps(control_command)
    
    # Send the JSON data to Arduino
    client_socket.sendall(command_json.encode())

    # Receive response from Arduino (optional for this example)
    response = client_socket.recv(1024)
    print("Response from Arduino:", response.decode())

except socket.error as e:
    print(f"Socket error: {e}")

finally:
    # Close the client socket connection
    client_socket.close()


"""
EXPLANATION OF THE CODE

Importing Modules: Imports the necessary modules socket for socket programming and json for JSON serialization and deserialization.

Define Arduino Server Details: Sets the IP address (arduino_host) and port (arduino_port) of the Arduino server to establish a connection.

Create Socket: Initializes a socket object (client_socket) using socket.socket() with parameters for IPv4 (AF_INET) and TCP (SOCK_STREAM) socket types.

Connect to Arduino: Attempts to establish a connection (client_socket.connect()) with the Arduino server using the defined host and port.

Prepare Control Command: Defines a sample control command (control_command) to control the car (e.g., move forward at speed 50).

Serialize to JSON: Converts the control command dictionary (control_command) into a JSON formatted string (command_json) using json.dumps().

Send Data: Sends the serialized JSON data (command_json) to the Arduino server (client_socket.sendall()).

Receive Response (Optional): Optionally receives a response from the Arduino (client_socket.recv()) and prints it.

Exception Handling: Catches and handles socket errors (socket.error) that may occur during connection or data transmission.

Close Socket: Ensures the client socket is properly closed (client_socket.close()) regardless of whether the connection was successful or encountered an error.
"""


"""
NOTIONS COVERED

Network Sockets: Creation and usage of sockets for network communication.
JSON Serialization: Conversion of Python objects (control commands) into JSON format (json.dumps()).
Client-Server Communication: Establishment of a client (Raspberry Pi) and server (Arduino) model for bidirectional communication.
Data Transfer Mechanisms: Sending structured data (JSON) over a network connection (client_socket.sendall()).
"""
