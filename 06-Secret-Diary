# Secret Diary Application
# This Python program simulates a secure diary application where users can write encrypted entries.

class Diary:
    def __init__(self, password):
        self._password = password  # Private attribute for password (encapsulation)
        self._entries = []         # Private attribute for storing diary entries (encapsulation)

    def write_entry(self, password, entry):
        if password == self._password:  # Check if the password matches
            self._entries.append(entry)  # Add the new entry to the diary
            print("Entry added successfully.")
        else:
            print("Incorrect password. Entry not added.")

    def read_entries(self, password):
        if password == self._password:
            if self._entries:
                print("Diary Entries:")
                for entry in self._entries:
                    print(entry)
            else:
                print("Diary is empty.")
        else:
            print("Incorrect password. Cannot read entries.")

    def change_password(self, current_password, new_password):
        if current_password == self._password:
            self._password = new_password
            print("Password changed successfully.")
        else:
            print("Incorrect password. Password not changed.")

# Example usage:
if __name__ == "__main__":
    my_diary = Diary("mysecretpassword")

    # Writing entries
    my_diary.write_entry("mysecretpassword", "Today was a good day.")
    my_diary.write_entry("wrongpassword", "This entry should not be added.")

    # Reading entries
    my_diary.read_entries("mysecretpassword")
    my_diary.read_entries("wrongpassword")

    # Changing password
    my_diary.change_password("mysecretpassword", "newsecretpassword")
    my_diary.change_password("wrongpassword", "anotherpassword")


"""
EXPLANATION OF THE CODE

The Diary class is defined to simulate a secure diary application.
The __init__() method initializes the diary with a password and an empty list for entries.
write_entry() method allows adding entries to the diary if the correct password is provided.
read_entries() method displays all entries if the correct password is provided.
change_password() method allows changing the password if the current password is correct.
Example usage demonstrates creating a diary instance, writing entries, reading entries, and changing the password.
"""


"""
NOTIONS COVERED

Attribute encapsulation (using _password and _entries as private attributes)
Getter (self._password) and setter methods (change_password())
Encapsulated access control (write_entry() and read_entries() methods)
Data security through password protection
"""
