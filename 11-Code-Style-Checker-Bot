# Welcome to the Code Style Checker Bot!
# This bot checks Python code for compliance with PEP 8 guidelines and provides feedback.

import re  # Importing the regular expression module for pattern matching

class CodeStyleChecker:
    def __init__(self):
        self.max_line_length = 79  # Maximum allowed line length as per PEP 8
        self.indentation_spaces = 4  # Number of spaces per indentation level

    def check_pep8_compliance(self, code):
        """
        Check PEP 8 compliance for the given Python code.

        Args:
        - code (str): Python code as a string

        Returns:
        - list: A list of tuples containing line numbers and PEP 8 violations found
        """
        violations = []

        # Check for lines exceeding maximum length
        lines = code.split('\n')
        for i, line in enumerate(lines):
            if len(line) > self.max_line_length:
                violations.append((i + 1, "Line length exceeds PEP 8 recommendations"))

        # Check for incorrect indentation
        for i, line in enumerate(lines):
            if re.match(r'^\s+', line):  # Match any leading whitespace
                num_spaces = len(re.match(r'^\s+', line).group(0))
                if num_spaces % self.indentation_spaces != 0:
                    violations.append((i + 1, "Incorrect indentation"))

        # Additional checks can be added for other PEP 8 guidelines here

        return violations

    def display_violations(self, violations):
        """
        Display PEP 8 violations found in the code.

        Args:
        - violations (list): List of tuples containing line numbers and violation messages
        """
        if violations:
            print("PEP 8 violations found:")
            for line_num, message in violations:
                print(f"Line {line_num}: {message}")
        else:
            print("No PEP 8 violations found. Code is compliant!")

# Example usage:
if __name__ == "__main__":
    checker = CodeStyleChecker()
    
    # Example Python code to be checked (replace with actual code for testing)
    python_code = """
def example_function():
    print("Hello, world!")
    if True:
        print("This is indented correctly.")
  print("This line is indented incorrectly.")  # This line exceeds maximum length
    """

    # Check PEP 8 compliance
    violations = checker.check_pep8_compliance(python_code)

    # Display violations
    checker.display_violations(violations)


"""
EXPLANATION OF THE CODE

The code begins by importing the re module for regular expression operations.
A class CodeStyleChecker is defined to encapsulate the functionality of checking Python code for PEP 8 compliance.
The __init__ method initializes class variables, including max_line_length and indentation_spaces.
The check_pep8_compliance method takes a string of Python code (code) as input and checks for PEP 8 violations such as line length and indentation errors.
The display_violations method prints out any violations found in the code.
In the main block, an instance of CodeStyleChecker is created (checker), and a sample Python code snippet (python_code) is provided for testing purposes.
PEP 8 compliance is checked using checker.check_pep8_compliance(python_code), and the violations (if any) are displayed using checker.display_violations(violations).
"""


"""
NOTIONS COVERED

PEP 8 guidelines
Coding conventions and best practices
Code layout (indentation, line length, line breaks, blank lines)
String quoting (single vs. double quotes, trailing commas)
Module imports
Whitespace in expressions and statements
Comments (block comments, inline comments)
Naming conventions
"""
